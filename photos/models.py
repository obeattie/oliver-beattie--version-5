from django.db import models

from obeattie.metadata.models import License

class Photoset(models.Model):
    """Represents a Flickr photoset."""
    id = models.IntegerField('Flickr ID', blank=False, null=False, primary_key=True)
    # Metadata
    title = models.CharField(max_length=250, blank=False, null=False, db_index=True)
    description = models.TextField(blank=True, null=True)
    # Flickry metadata
    primary_photo_id = models.IntegerField('Primary Photo ID', blank=True, null=True)
    flickr_secret = models.CharField(max_length=50, blank=True, null=True)
    flickr_server_farm = models.IntegerField(blank=False, null=False)
    flickr_server = models.IntegerField(blank=False, null=False)
    
    class Admin:
        pass
    
    def __unicode__(self):
        return self.title

class Photo(models.Model):
    """Represents a Flickr photo."""
    id = models.IntegerField('Flickr ID', blank=False, null=False, primary_key=True)
    # Metadata
    title = models.CharField(max_length=250, blank=False, null=False, db_index=True)
    description = models.TextField(blank=True, null=True)
    rotation_degrees = models.IntegerField(blank=False, null=False, default=0)
    license = models.ForeignKey(License, blank=True, null=True)
    # Permissions
    public_viewable = models.BooleanField(default=False)
    friends_viewable = models.BooleanField(default=False)
    family_viewable = models.BooleanField(default=False)
    # Timestamps
    posted_timestamp = models.DateTimeField(blank=False, null=False)
    taken_timestamp = models.DateTimeField(blank=True, null=True) # Not required in case of no date
    updated_timestamp = models.DateTimeField(blank=True, null=True)
    # Flickr Crap
    flickr_secret = models.CharField(max_length=250, blank=True, null=True, editable=False)
    flickr_original_secret = models.CharField(max_length=250, blank=True, null=True, editable=False)
    
    class Admin:
        list_display = ('title', 'description', 'public_viewable', 'posted_timestamp', )
        list_filter = ('public_viewable', 'posted_timestamp', 'taken_timestamp', )
        s
    
    class Meta:
        ordering = ('-posted_timestamp', 'title', )

class PhotoSize(models.Model):
    """Represents a size of a Photo from Flickr."""
    photo = models.ForeignKey(Photo, blank=False, null=False)
    label = models.CharField(max_length=250, blank=False, null=False)
    # Size
    width = models.IntegerField(blank=False, null=False, help_text='(In pixels)', editable=False)
    height = models.IntegerField(blank=False, null=False, help_text='(In pixels)', editable=False)
    # URLs and paths
    location = models.URLField('Location to the image', blank=True, null=True, verify_exists=False)
    detail_url = models.URLField('Location to a page showing the image', blank=True, null=True, verify_exists=False)
    local_file = models.ImageField('Image File', blank=True, null=True, width_field='width', height_field='height', upload_to='images/photos')
    # Miscellaneous
    is_flickr = models.BooleanField('A size generated by Flickr?', default=False, help_text='Set if the size was generated by Flickr.')
    
    class Admin:
        list_display = ('label', 'photo', 'width', 'height', )
        list_filter = ('is_flickr', )
        search_fields = ('label', 'photo__title', 'detail_url', 'location', )
    
    class Meta:
        unique_together = (('photo', 'label', ), ('photo', 'width', 'height', ), )
